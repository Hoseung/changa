//NChilada.ci

module NChilada {
	
	extern module Reductions;

	PUPable TreeNode;
	
	readonly CkArrayID treePieceID;
	readonly CkGroupID dataManagerID;
	readonly int verbosity;
	readonly Space3D<double> space;
	
	initcall void registerNChiladaReductions();
	
	chare Sorter {
		entry Sorter();
		
		entry void startSorting(const CkGroupID& dataManagerID, const int nChares, const double toler, const CkCallback& cb);	
		entry void collectEvaluations(CkReductionMsg* m);
	};
	
	nodegroup DataManager {
		entry DataManager(const CkArrayID& treePieceID);
		
		entry void acceptCandidateKeys(const Key keys[n], const int n, const CkCallback& cb);
		entry void acceptFinalKeys(const Key keys[n], const int responsible[n - 1], const int bins[n - 1], const int n, const CkCallback& cb);
		
		//entry void compilePerParticleFunction(const string& code, const CkCallback& cb);
	};
	
	array [1D] TreePiece {
		entry TreePiece();
		
		entry void registerWithDataManager(const CkGroupID& dataManagerID, const CkCallback& cb);
		
		entry void loadParticles(const std::string& filename, const int numPieces, const CkCallback& cb);
		entry void assignKeys(CkReductionMsg* m);
		
		entry void evaluateBoundaries(const CkCallback& cb);
		entry void unshuffleParticles(CkReductionMsg* m);
		//entry void getParticles(const FullParticle particles[n], const int n);
		entry void acceptSortedParticles(const FullParticle particles[n], const int n);
		entry void shareBoundaries(CkReductionMsg* m);
		entry void acceptBoundaryKey(const Key k);
		
		entry void startTreeBuild(const CkCallback& cb);
		
		entry void report(const CkCallback& cb);
		
		//entry void generateImage(liveVizRequestMsg* m);
		//entry void applyPerParticleFunction(const CkCallback& cb);
	};
	
};
